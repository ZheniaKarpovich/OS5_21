Решения присылайте на почту alpheratzz@yandex.ru
Не забывайте указывать вашу фамилию и группу.
Проверяться будут задания только от тех студентов, кто сделал первое задание в четверг/пятницу 10-11 мая.
Решения принимаются до 23:59 пятницы 18 мая. Все решения, которые придут позже(даже хотя бы на минуту), будут проигнорированы.

Если кому-то нужно, образ виртуалки Ubuntu версии 14.04.5 (32 бит) лежит в папке(пароль от аккаунта такой же - osboxes.org). Там же есть даже установщик для VirtualBox.
Если кому-то хочется другой дистрибутив/версию, можно их найти, например тут: https://www.osboxes.org/


Нужно выполнить любой(ровно один) из указанных ниже вариантов заданий А либо Б. 
Сдавать и задание А, и задание Б одновременно не разрешается. Если кто-то пришлет мне оба, я проверю только задание Б.
Задание А:
    В каждой группе каждый вариант задания А будет приниматься только один раз. 
    Т.е. если несколько человек из одной группы пришлет решение одного и того же варианта задания А, я приму его только у того, кто первый прислал рабочее решение; остальным нужно будет присылать другие варианты.
    Варианты внутри группы распределяете между собой сами!
Задание Б:
    Максимальный балл удвоен по сравнению с заданием А.
    Но! Каждый вариант задания Б принимается только один раз со всего потока, а не группы.
    Т.е. не более 3 студентов со всего потока могут сдать задание Б.


Для выполнения задания А про баш-скрипты рекомендую почитать что-нибудь из этого
    http://www.opennet.ru/docs/RUS/bash_scripting_guide/    Хороший мануал на русском языке. Информации много, так что ищите в оглавлении то, что вас интересует. Впрочем, части 1 и 2 прочитать все же стоит.
    https://habr.com/post/47163/        Небольшая шпаргалка по шелл-скриптам
    https://acm.bsu.by/wiki/Unix2016    Электронный конспект занятий 4-7 магистратуры ФПМИ по специальности АиСОБОИ (2016-2017), (правда, пояснения есть не для всех примеров)
    http://tux-the-penguin.blogspot.com.by/2010/10/bash-1.html      Еще одна статья с кратким описанием базовых фич, написанная доступным языком
Если дружите с английским, можно глянуть и сюда и много куда еще!
    http://mywiki.wooledge.org/BashGuide
    https://github.com/learnbyexample/Linux_command_line

для поиска чего угодно в тексте рекомендуется использовать grep
    https://habr.com/post/229501/
    https://shepetko.com/ru/blog/o-grep-dlya-nachinayuschikh


A.  Написать баш-скрипт, который выполняет следующую задачу.
    1. Найти в заданной директории и ее субдиректориях все файлы с заданным расширением и записывает их имена в заданный файл.
        Аргументы: 1. директория, в которой ведется поиск 2. расширение файлов 3. путь к файлу, в который будет записан список найденных файлов
        Например,
            ./foo.sh /usr txt ~/list.txt
    2. Создать в текущей директории структуру папок вида
        a/
            b/
                c/
        с заданной глубиной и копирует в каждую из созданных папок заданный файл, в названии которого должен быть номер копии
        Аргументы: 2. максимальная глубина(ограничение - от 1 до 26 включительно) 3. копируемый файл
        Например,
            ./foo.sh 3 ./bar/baz.txt
        В результате должно получиться что-то такое:
        a/
            1.txt
            b/
                2.txt
                c/
                    3.txt
    3. Найти в заданной директории файлы, содержащие заданную подстроку(не в названии, а в содержимом), и выводит полные пути к ним на экран
        Например,
            ./foo.sh ~ "Hello world"
    4. Найти в заданной директории файлы по заданной части названия и записывает результаты в заданный файл
        Например,
            ./foo.sh /home file ~/out.txt
    5. Вывести на экран глубину пути к директории, из которой вызывается скрипт(а не из той, где находится сам файл со скриптом)
    6. Вывести PIDы(и ничего другого) всех процессов по заданной части имени процессов
        Например,
            ./foo.sh firefox
        должно выводить на экран список PIDов процессов, в названии которых есть слово firefox
    7. Вывести текущие дату, время и температуру воздуха в Минске (подсказка: используйте утилиту curl, например. Она не выдаст вам текущую погоду, но может помочь вам с получением этой информации из интернета)
    8. Найти все комментарии(в том числе и многострочные) в заданном .cpp файле(проверить расширение файла) и вывести их в заданный выходной файл
        Например,
            ./foo.sh test/hello.cpp out.txt
        должно выводить все комментарии C/C++ из файла test/hello.cpp в файл out.txt
    9. Вывести на экран названия всех функций, определенных в заданном файле с программой на Python(проверить расширение файла)
        Поищите, как определяются функции в питоне.
        Например,
            ./foo.sh test.py
    10. Создать структуру папок вида 
            YYYY/MM/DD/hh/mm/ss
        где hh:mm:ss DD/MM/YYYY - время и дата вызова скрипта
    11. Выводить на экран каждый N-ый символ последовательности Фибоначчи(строка, в которую записаны подряд числа Фибоначчи по порядку. Последовательность должна начинаться с нуля и единицы: 01123581321...) заданной длины. N передается в качестве аргумента:
        Например,
            ./fib.sh 3 20
        должно вывести 153351
    12. Написать скрипт, который выводит подряд первые N букв названий каждой субдиректории заданной директории
        Например,
            ./foo /bin 3
    13. Написать скрипт, который выводит текст песни 99 bottles of beer (без грамматических ошибок!)
    14. Вывести на экран пути к файлам внутри заданной директории(и ее субдиректориях), в которых есть ровно одна директория с именем, состоящим только из цифр
        Например,
            ./foo.sh /bin
    15. Для заданного файла попарно поменять местами строки с номерами 2*i+1 и 2*i. Если в файле всего нечетное количество строк, то самую последнюю строку поместить в начало файла после завершения всех обменов. Никаких дополнительных файлов создаваться не должно, на экран ничего выводить не нужно.
        Например,
            ./foo.sh test.txt
    16. Вывести на экран заданный интервал(задается двумя числами - границами интервала, нужна проверка введенных значений - от 0 до 127) таблицы ASCII. В каждой строке - номер символа и сам символ через пробел. Насчет спецсимволов не заморачивайтесь
        Например,
            ./foo.sh 50 60
        должно выводить
            50 2
            51 3
            52 4
            53 5
            54 6
            55 7
            56 8
            57 9
            58 :
            59 ;
            60 <
    17. Разложить заданное число на простые множители и вывести их сумму на экран
        Например,
            ./foo.sh 120
        должно вывести 14 (2+2+2+3+5)
    18. Рекурсивно запускать самого себя с заданной глубиной. С каждым запуском в новую строку через пробел вывести PID и в который раз скрипт уже был запущен
        Например,
            ./rec.sh 5
    19. Проиграть заданный звуковой файл по истечении заданного интервала времени(в секундах)
        Например,
            ./alarm.sh 60 music/alarm.mp3
    20. Сгенерировать случайное число и запрашивать ввод с клавиатуры, пока пользователь не введет загаданное число. При этом выводить номер каждой попытки на экран.
        Можно также отвечать пользователю, больше или меньше загаданного числа, которые он вводит
    21. Сыграть с пользователем в Быки и Коровы. (Почти то же самое, что и в предыдущем варианте - скрипт загадывает, пользователь отгадывает)
    22. Выводить раз в секунду на экран количество времени, прошедшее с момента запуска скрипта, пока не будет нажата клавиша Enter
    23. Проверить, является ли заданная строка корректным IP-адресом и вывести на экран соответствующее сообщение. Допускается также указание порта через двоеточие после адреса
        Не забудьте проверить адрес и порт на корректность
        Например,
            ./foo.sh 127.0.0.1:80
        должно вывести сообщение "OK(IP:Port)"
            ./foo.sh 127.0.0.1
        должно вывести сообщение "OK(IP)"
            ./foo.sh u8w7kjne
        должно вывести сообщение "Error"


Для задания Б рекомендуется искать информацию о нужных функциях языка C здесь
(В частности, про функцию fork() в языке С, способы взаимодействия процессов в Linux, сокеты)
    https://www.opennet.ru/docs/RUS/linux_parallel/

Б. Написать программу на C.
    1. Атака клонов!
        Как все должна работать:
        Запускается две копии вашей программы, назовем их А и Б.
        А передает Б свой PID, затем запускает дочерний процесс А* с поомщью функции fork().
        Б убивает основной процесс А, а процесс А* становится основным (замещает А).
        Затем все наоборот: Б передает А(т. е. бывшему А*) свой PID, создает свою копию Б* через fork(), а затем А убивает основной процесс Б.
        И так до бесконечности

        Для передачи PID можно использовать любой механизм связи процессов - каналы, разделямая память, сокеты и т.д.
        Подсказка: что при вызове fork() произойдет с файловыми дескрипторами программы, которая клонирует себя?
    2. Написать простенький сервер для чата, использующий сокеты.
        Сервер слушает входящие сообщения от каждого клиента в отдельном потоке и записывает их в общую очередь сообщений
        Главный поток постоянно проверяет, не пуста ли очередь. Если пуста - нужно разослать всем клиентам первое сообщение из очереди
        Добавлять к каждому отправляемому сообщению время отправки (чтобы клиенты получали сообщения вроде "14:27 xxx: hello", например)

        Никаких имен клиентов хранить не нужно.
    3. Написать простенький клиент для сервера из предыдущего пункта. Тоже использовать сокеты
        Клиент соединяется с сервером, слушает все сообщения от него и при получении сообщения мгновенно выводит его на экран
        При запуске клиента указывать свое имя в виде аргумента командной строки, перед отправкой сообщения на сервер добавлять это имя к сообщению (чтобы отправлялась строка вроде "xxx: hello", например)
